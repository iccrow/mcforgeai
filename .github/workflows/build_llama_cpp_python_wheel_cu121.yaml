name: Python LLaMa CPP Python CMake Cuda 12.1

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Setup venv + build deps
        shell: pwsh
        run: |
          python -m venv .venv
          .\.venv\Scripts\Activate.ps1
          python -m pip install --upgrade pip wheel build setuptools scikit-build-core cmake ninja

      - name: Setup CUDA 12.1 (network)
        uses: Jimver/cuda-toolkit@v0.2.24
        id: cuda-toolkit
        with:
          cuda: '12.1.0'
          method: 'network'

      - name: Put CUDA on PATH + verify
        shell: pwsh
        run: |
          "$('${{ steps.cuda-toolkit.outputs.CUDA_PATH }}')\\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          & "${{ steps.cuda-toolkit.outputs.CUDA_PATH }}\\bin\\nvcc.exe" --version

      - name: Build wheel (CUDA 12.1, Ninja)
        shell: pwsh
        env:
          # Use Ninja (donâ€™t use CMAKE_GENERATOR_TOOLSET here)
          CMAKE_GENERATOR: "Ninja"
          CMAKE_ARGS: "-DGGML_CUDA=on"
          # Ensure nvcc + host compiler are exactly what we want
          # CUDACXX: "${{ steps.cuda-toolkit.outputs.CUDA_PATH }}\\bin\\nvcc.exe"
          # CMAKE_CUDA_COMPILER: "${{ steps.cuda-toolkit.outputs.CUDA_PATH }}\\bin\\nvcc.exe"
          # Helpful extras
          FORCE_CMAKE: "1"
          # CUDA_PATH: ${{ steps.cuda-toolkit.outputs.CUDA_PATH }}

        run: |
          .\.venv\Scripts\Activate.ps1
          python -m pip wheel llama-cpp-python==0.3.14 -w dist --verbose

      - name: Upload wheel
        uses: actions/upload-artifact@v4
        with:
          name: wheels-windows-py310-cuda118
          path: dist/*.whl
