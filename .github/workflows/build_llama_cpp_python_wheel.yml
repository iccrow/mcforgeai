# This is a basic workflow to help you get started with Actions

name: Python LLaMa CPP Python CMake

# Controls when the workflow will run
on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: windows-2022

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Enter MSVC dev prompt (v14.29)
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64
        env:
          VCToolsVersion: 14.29.30133

      - name: Pin PATH to MSVC 14.29 bin
        shell: pwsh
        run: |
          $v142="C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.29.30133\bin\Hostx64\x64"
          echo "Adding $v142 to PATH (front)"
          echo "$v142;$env:PATH" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      # - name: Verify msvc
      #   shell: pwsh
      #   run: cl.exe /Bv
          
      - name: Setup Cuda
        uses: Jimver/cuda-toolkit@v0.2.24
        id: cuda-toolkit
        with:
          cuda: '11.8.0'

      - name: Put CUDA on PATH + verify
        shell: pwsh
        run: |
          "$('${{ steps.cuda-toolkit.outputs.CUDA_PATH }}')\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          & "${{ steps.cuda-toolkit.outputs.CUDA_PATH }}\bin\nvcc.exe" --version

      - name: Build wheel (CUDA 11.8, v142, Ninja)
        shell: pwsh
        env:
          # make CMake pick Ninja and CUDA
          CMAKE_GENERATOR: "Ninja"
          CMAKE_ARGS: "-DGGML_CUDA=on"
          # ensure nvcc & host compiler are the ones we want
          CMAKE_CUDA_COMPILER: "${{ steps.cuda-toolkit.outputs.CUDA_PATH }}\bin\nvcc.exe"
          CUDACXX: "${{ steps.cuda-toolkit.outputs.CUDA_PATH }}\bin\nvcc.exe"
          CMAKE_CUDA_HOST_COMPILER: "C:/Program Files/Microsoft Visual Studio/2022/Enterprise/VC/Tools/MSVC/14.29.30133/bin/Hostx64/x64/cl.exe"
          # toolset + venv bits
          FORCE_CMAKE: "1"
          CUDA_PATH: ${{ steps.cuda-toolkit.outputs.CUDA_PATH }}
        run: |
          .\.venv\Scripts\Activate.ps1
          where cl
          where nvcc
          python -m pip wheel llama-cpp-python==0.3.14 -w dist --verbose

      - name: Upload wheel
        uses: actions/upload-artifact@v4
        with:
          name: wheels-windows-py310-cuda118
          path: dist/*.whl
